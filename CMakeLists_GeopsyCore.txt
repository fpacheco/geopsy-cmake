### RFPV ###
### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(GeopsyCore VERSION 1.0.0 DESCRIPTION "GeopsyCore description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find zlib
find_package(ZLIB REQUIRED)
# Find MPFR
find_package(MPFR REQUIRED)
# Find GMP
find_package(GMP REQUIRED)
# Find LAPACK
find_package(LAPACK REQUIRED)
# Find BLAS
find_package(BLAS REQUIRED)
## Find QGpCoreTools
#find_library(QGPCORETOOLS_LIBRARY
    #NAMES QGpCoreTools
    #HINTS ${THIS_LIB_PATH}
#)
#message(STATUS "QGPCORETOOLS_LIBRARY: ${QGPCORETOOLS_LIBRARY}")
## Find QGpCoreMath
#find_library(QGPCOREMATH_LIBRARY
    #NAMES QGpCoreMath
    #HINTS ${THIS_LIB_PATH}
#)
#message(STATUS "QGPCOREMATH_LIBRARY: ${QGPCOREMATH_LIBRARY}")
###

### Qt5 support
set(CMAKE_AUTOMOC ON)
# set(CMAKE_AUTOMOC_RELAXED_MODE ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Find Qt5 and add components Widgets, Qml, Sql, Network
find_package(Qt5 COMPONENTS Core Qml Network REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Qml_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

set(QT5_LIBRARIES Qt5::Core Qt5::Qml Qt5::Network)
#set(QT5_LIBRARIES Qt5::Core Qt5::Qml Qt5::Network)
#message(STATUS "QT5_LIBRARIES: ${QT5_LIBRARIES}")
#message(STATUS "Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
#message(STATUS "Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
#message(STATUS "Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
###

set(TARGET ${CMAKE_PROJECT_NAME})

set(CPP_SRCS
    geopsy-src/geopsy/GeopsyCore/src/AbstractFileFormat.cpp
    geopsy-src/geopsy/GeopsyCore/src/AbstractSignalGroup.cpp
    geopsy-src/geopsy/GeopsyCore/src/AbstractSignalResults.cpp
    geopsy-src/geopsy/GeopsyCore/src/AbstractTool.cpp
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormat.cpp
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatComponent.cpp
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatReader.cpp
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatRule.cpp
    geopsy-src/geopsy/GeopsyCore/src/CityScanner.cpp
    geopsy-src/geopsy/GeopsyCore/src/CitySignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/Comments.cpp
    geopsy-src/geopsy/GeopsyCore/src/ComplexSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/CoreToolInterface.cpp
    geopsy-src/geopsy/GeopsyCore/src/CustomFileFormats.cpp
    geopsy-src/geopsy/GeopsyCore/src/DefaultSignalGroup.cpp
    geopsy-src/geopsy/GeopsyCore/src/DeviceCardScanner.cpp
    geopsy-src/geopsy/GeopsyCore/src/DoubleSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/DuplicateRays.cpp
    geopsy-src/geopsy/GeopsyCore/src/DynamicSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/FFTW.cpp
    geopsy-src/geopsy/GeopsyCore/src/FFTWCache.cpp
    geopsy-src/geopsy/GeopsyCore/src/FastFourierTransform.cpp
    geopsy-src/geopsy/GeopsyCore/src/FastPartialFourierTransform.cpp
    geopsy-src/geopsy/GeopsyCore/src/FilterParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCore.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreEngine.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreInterface.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsyPlugins.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsyPreferences.cpp
    geopsy-src/geopsy/GeopsyCore/src/GeopsySignalHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/Gse.cpp
    geopsy-src/geopsy/GeopsyCore/src/GuralpCompressedBlock.cpp
    geopsy-src/geopsy/GeopsyCore/src/GuralpRecords.cpp
    geopsy-src/geopsy/GeopsyCore/src/GuralpSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/InstrumentalResponse.cpp
    geopsy-src/geopsy/GeopsyCore/src/KeepSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/MasterSignalGroup.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaData.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaDataFactory.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaDataField.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaDataFieldList.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaDataIndex.cpp
    geopsy-src/geopsy/GeopsyCore/src/MetaDataMap.cpp
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedReader.cpp
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedRecords.cpp
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedSequence.cpp
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedTrace.cpp
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedVolume.cpp
    geopsy-src/geopsy/GeopsyCore/src/MorletParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/NormalizationParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/OriginalFileName.cpp
    geopsy-src/geopsy/GeopsyCore/src/PasscalSegYHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/RotateParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/SACHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SEGDHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SEGYHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SEGYTraceHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SharedMetaData.cpp
    geopsy-src/geopsy/GeopsyCore/src/SharkHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/Signal.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalDatabase.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalExpression.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalExpressionContext.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalFile.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalFileFormat.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalFilePool.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalGroup.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalGroupFactory.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalGroupFolder.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderClass.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderObject.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderScript.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalProcess.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalProcessObject.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalProcessScript.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalResultsFactory.cpp
    geopsy-src/geopsy/GeopsyCore/src/SignalTemplate.cpp
    geopsy-src/geopsy/GeopsyCore/src/SortKey.cpp
    geopsy-src/geopsy/GeopsyCore/src/SparseKeepSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/SparseTimeRange.cpp
    geopsy-src/geopsy/GeopsyCore/src/StackCount.cpp
    geopsy-src/geopsy/GeopsyCore/src/StationGroup.cpp
    geopsy-src/geopsy/GeopsyCore/src/StationList.cpp
    geopsy-src/geopsy/GeopsyCore/src/StationProcessSignals.cpp
    geopsy-src/geopsy/GeopsyCore/src/StationSignals.cpp
    geopsy-src/geopsy/GeopsyCore/src/SubSignalPool.cpp
    geopsy-src/geopsy/GeopsyCore/src/SubSignalPoolProcess.cpp
    geopsy-src/geopsy/GeopsyCore/src/SyscomHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SyscomSVmrxHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/SyscomXmrHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/TaperDelegate.cpp
    geopsy-src/geopsy/GeopsyCore/src/TaperParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimePick.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimeRange.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimeRangeList.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimeRangeParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimeWindow.cpp
    geopsy-src/geopsy/GeopsyCore/src/TimeWindowList.cpp
    geopsy-src/geopsy/GeopsyCore/src/WaveHeader.cpp
    geopsy-src/geopsy/GeopsyCore/src/WindowingParameters.cpp
    geopsy-src/geopsy/GeopsyCore/src/XMLSignal.cpp
    geopsy-src/geopsy/GeopsyCore/src/XMLSubSignalPool.cpp
)

# Headers got to include/*
set(HEA_INC
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCore.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
geopsy-src/geopsy/GeopsyCore/src/AbstractFileFormat.h
    geopsy-src/geopsy/GeopsyCore/src/AbstractSignalGroup.h
    geopsy-src/geopsy/GeopsyCore/src/AbstractSignalResults.h
    geopsy-src/geopsy/GeopsyCore/src/AbstractTool.h
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormat.h
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatComponent.h
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatReader.h
    geopsy-src/geopsy/GeopsyCore/src/AsciiSignalFormatRule.h
    geopsy-src/geopsy/GeopsyCore/src/CityScanner.h
    geopsy-src/geopsy/GeopsyCore/src/CitySignal.h
    geopsy-src/geopsy/GeopsyCore/src/Comments.h
    geopsy-src/geopsy/GeopsyCore/src/ComplexSignal.h
    geopsy-src/geopsy/GeopsyCore/src/CoreToolInterface.h
    geopsy-src/geopsy/GeopsyCore/src/CustomFileFormats.h
    geopsy-src/geopsy/GeopsyCore/src/DefaultSignalGroup.h
    geopsy-src/geopsy/GeopsyCore/src/DeviceCardScanner.h
    geopsy-src/geopsy/GeopsyCore/src/DoubleSignal.h
    geopsy-src/geopsy/GeopsyCore/src/DuplicateRays.h
    geopsy-src/geopsy/GeopsyCore/src/DynamicSignal.h
    geopsy-src/geopsy/GeopsyCore/src/FFTW.h
    geopsy-src/geopsy/GeopsyCore/src/FFTWCache.h
    geopsy-src/geopsy/GeopsyCore/src/FastFourierTransform.h
    geopsy-src/geopsy/GeopsyCore/src/FastPartialFourierTransform.h
    geopsy-src/geopsy/GeopsyCore/src/FilterParameters.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCore.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreDLLExport.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreEngine.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreInstallPath.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreInterface.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreStatic.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyCoreVersion.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyPlugins.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsyPreferences.h
    geopsy-src/geopsy/GeopsyCore/src/GeopsySignalHeader.h
    geopsy-src/geopsy/GeopsyCore/src/Gse.h
    geopsy-src/geopsy/GeopsyCore/src/GuralpCompressedBlock.h
    geopsy-src/geopsy/GeopsyCore/src/GuralpRecords.h
    geopsy-src/geopsy/GeopsyCore/src/GuralpSignal.h
    geopsy-src/geopsy/GeopsyCore/src/InstrumentalResponse.h
    geopsy-src/geopsy/GeopsyCore/src/KeepSignal.h
    geopsy-src/geopsy/GeopsyCore/src/MasterSignalGroup.h
    geopsy-src/geopsy/GeopsyCore/src/MetaData.h
    geopsy-src/geopsy/GeopsyCore/src/MetaDataFactory.h
    geopsy-src/geopsy/GeopsyCore/src/MetaDataField.h
    geopsy-src/geopsy/GeopsyCore/src/MetaDataFieldList.h
    geopsy-src/geopsy/GeopsyCore/src/MetaDataIndex.h
    geopsy-src/geopsy/GeopsyCore/src/MetaDataMap.h
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedReader.h
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedRecords.h
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedSequence.h
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedTrace.h
    geopsy-src/geopsy/GeopsyCore/src/MiniSeedVolume.h
    geopsy-src/geopsy/GeopsyCore/src/MorletParameters.h
    geopsy-src/geopsy/GeopsyCore/src/NormalizationParameters.h
    geopsy-src/geopsy/GeopsyCore/src/OriginalFileName.h
    geopsy-src/geopsy/GeopsyCore/src/PasscalSegYHeader.h
    geopsy-src/geopsy/GeopsyCore/src/RotateParameters.h
    geopsy-src/geopsy/GeopsyCore/src/SACHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SEGDHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SEGYHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SEGYTraceHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SharedMetaData.h
    geopsy-src/geopsy/GeopsyCore/src/SharkHeader.h
    geopsy-src/geopsy/GeopsyCore/src/Signal.h
    geopsy-src/geopsy/GeopsyCore/src/SignalDatabase.h
    geopsy-src/geopsy/GeopsyCore/src/SignalExpression.h
    geopsy-src/geopsy/GeopsyCore/src/SignalExpressionContext.h
    geopsy-src/geopsy/GeopsyCore/src/SignalFile.h
    geopsy-src/geopsy/GeopsyCore/src/SignalFileFormat.h
    geopsy-src/geopsy/GeopsyCore/src/SignalFilePool.h
    geopsy-src/geopsy/GeopsyCore/src/SignalGroup.h
    geopsy-src/geopsy/GeopsyCore/src/SignalGroupFactory.h
    geopsy-src/geopsy/GeopsyCore/src/SignalGroupFolder.h
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderClass.h
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderObject.h
    geopsy-src/geopsy/GeopsyCore/src/SignalHeaderScript.h
    geopsy-src/geopsy/GeopsyCore/src/SignalProcess.h
    geopsy-src/geopsy/GeopsyCore/src/SignalProcessObject.h
    geopsy-src/geopsy/GeopsyCore/src/SignalProcessScript.h
    geopsy-src/geopsy/GeopsyCore/src/SignalResultsFactory.h
    geopsy-src/geopsy/GeopsyCore/src/SignalTemplate.h
    geopsy-src/geopsy/GeopsyCore/src/SortKey.h
    geopsy-src/geopsy/GeopsyCore/src/SparseKeepSignal.h
    geopsy-src/geopsy/GeopsyCore/src/SparseTimeRange.h
    geopsy-src/geopsy/GeopsyCore/src/StackCount.h
    geopsy-src/geopsy/GeopsyCore/src/StationGroup.h
    geopsy-src/geopsy/GeopsyCore/src/StationList.h
    geopsy-src/geopsy/GeopsyCore/src/StationProcessSignals.h
    geopsy-src/geopsy/GeopsyCore/src/StationSignals.h
    geopsy-src/geopsy/GeopsyCore/src/SubSignalPool.h
    geopsy-src/geopsy/GeopsyCore/src/SubSignalPoolProcess.h
    geopsy-src/geopsy/GeopsyCore/src/SyscomHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SyscomSVmrxHeader.h
    geopsy-src/geopsy/GeopsyCore/src/SyscomXmrHeader.h
    geopsy-src/geopsy/GeopsyCore/src/TaperDelegate.h
    geopsy-src/geopsy/GeopsyCore/src/TaperParameters.h
    geopsy-src/geopsy/GeopsyCore/src/TimePick.h
    geopsy-src/geopsy/GeopsyCore/src/TimeRange.h
    geopsy-src/geopsy/GeopsyCore/src/TimeRangeList.h
    geopsy-src/geopsy/GeopsyCore/src/TimeRangeParameters.h
    geopsy-src/geopsy/GeopsyCore/src/TimeWindow.h
    geopsy-src/geopsy/GeopsyCore/src/TimeWindowList.h
    geopsy-src/geopsy/GeopsyCore/src/WaveHeader.h
    geopsy-src/geopsy/GeopsyCore/src/WindowingParameters.h
    geopsy-src/geopsy/GeopsyCore/src/XMLSignal.h
    geopsy-src/geopsy/GeopsyCore/src/XMLSubSignalPool.h
    geopsy-src/geopsy/GeopsyCore/src/stable.h
)

# Headers got to include/*
set(UI_SRCS

)

#
# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
# QT5_WRAP_UI(UI_GENERATED_HEADERS ${UI_SRCS})

# Include header files for compilation
include_directories(src)

# Dont do TimePick.moc
set_property(SOURCE geopsy-src/geopsy/GeopsyCore/src/TimePick.cpp PROPERTY SKIP_AUTOMOC ON)

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

# Add resources from file
qt5_add_resources(QRCS )

# Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS})
target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES} ${MPFR_LIBRARIES} ${GMP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES}) 
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${QT5_LIBRARIES})
# Geopsy libraries - Comment out
# -lQGpCoreTools -lQGpCoreMath -lmseed -lfftw3 
target_link_libraries(${PROJECT_NAME} mseed)
target_link_libraries(${PROJECT_NAME} QGpCoreTools)
#target_link_libraries(${PROJECT_NAME} QGpGuiTools)
target_link_libraries(${PROJECT_NAME} QGpCoreMath)
#target_link_libraries(${PROJECT_NAME} QGpGuiMath)
#target_link_libraries(${PROJECT_NAME} QGpCoreWave)
#target_link_libraries(${PROJECT_NAME} QGpGuiWave)
#target_link_libraries(${PROJECT_NAME} SciFigs)
#target_link_libraries(${PROJECT_NAME} DinverCore)
#target_link_libraries(${PROJECT_NAME} DinverGui)
#target_link_libraries(${PROJECT_NAME} DinverDCCore)
#target_link_libraries(${PROJECT_NAME} DinverDCGui)
target_link_libraries(${PROJECT_NAME} fftw3)

# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

### POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})

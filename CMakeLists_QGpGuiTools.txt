### RFPV ###
### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(QGpGuiTools VERSION 0.0.0 DESCRIPTION "QGpGuiTools description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(CMAKE_MODULAR_BUILD)
    # Global build
    set(THIS_REL_PATH ".")
    #message(STATUS "****** Modular (src: ${THIS_REL_PATH}/src) ******")
else()
    set(THIS_REL_PATH "geopsy-src/lib/QGpCoreGui")
    #message(STATUS "****** Monolithic (src: ${THIS_REL_PATH}/src) ******")
endif()

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find zlib
find_package(ZLIB REQUIRED)
# Find MPFR
find_package(MPFR REQUIRED)
# Find GMP
find_package(GMP REQUIRED)
# Find LAPACK
find_package(LAPACK REQUIRED)
# Find BLAS
find_package(BLAS REQUIRED)
## Find QGpCoreTools
#find_library(QGPCORETOOLS_LIBRARY
    #NAMES QGpCoreTools
    #HINTS ${THIS_LIB_PATH}
#)
#message(STATUS "QGPCORETOOLS_LIBRARY: ${QGPCORETOOLS_LIBRARY}")
###

### Qt5 support
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Find Qt5 and add components Widgets, Qml, Sql, Network
find_package(Qt5 COMPONENTS Core Gui Widgets Qml Network PrintSupport REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Qml_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

set(QT5_LIBRARIES Qt5::Core Qt5::Gui Qt5::Widgets Qt5::Qml Qt5::Network Qt5::PrintSupport)
#message(STATUS "QT5_LIBRARIES: ${QT5_LIBRARIES}")
#message(STATUS "Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
#message(STATUS "Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
#message(STATUS "Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "Autogen goes to: ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_autogen")
###

set(TARGET ${CMAKE_PROJECT_NAME})

set(CPP_SRCS
    ${THIS_REL_PATH}/src/Application.cpp
    ${THIS_REL_PATH}/src/Attachments.cpp
    ${THIS_REL_PATH}/src/BugReport.cpp
    ${THIS_REL_PATH}/src/Cast.cpp
    ${THIS_REL_PATH}/src/CheckComboBox.cpp
    ${THIS_REL_PATH}/src/CheckComboBoxModel.cpp
    ${THIS_REL_PATH}/src/ColorButton.cpp
    ${THIS_REL_PATH}/src/ColorHistogram.cpp
    ${THIS_REL_PATH}/src/ColumnTextColumnsProperties.cpp
    ${THIS_REL_PATH}/src/ColumnTextDelegate.cpp
    ${THIS_REL_PATH}/src/ColumnTextItem.cpp
    ${THIS_REL_PATH}/src/ColumnTextLinesProperties.cpp
    ${THIS_REL_PATH}/src/ColumnTextSectionsProperties.cpp
    ${THIS_REL_PATH}/src/ColumnTextWidget.cpp
    ${THIS_REL_PATH}/src/ConnectionParam.cpp
    ${THIS_REL_PATH}/src/Dialog.cpp
    ${THIS_REL_PATH}/src/DockWidget.cpp
    ${THIS_REL_PATH}/src/DoubleSpinBox.cpp
    ${THIS_REL_PATH}/src/ExpandTabTitle.cpp
    ${THIS_REL_PATH}/src/ExpandTabWidget.cpp
    ${THIS_REL_PATH}/src/ExpressionEditor.cpp
    ${THIS_REL_PATH}/src/FindReplaceWidget.cpp
    ${THIS_REL_PATH}/src/FrozenWidget.cpp
    ${THIS_REL_PATH}/src/GuiGlobal.cpp
    ${THIS_REL_PATH}/src/GuiMessage.cpp
    ${THIS_REL_PATH}/src/HttpAccess.cpp
    ${THIS_REL_PATH}/src/HttpProxy.cpp
    ${THIS_REL_PATH}/src/HttpProxyList.cpp
    ${THIS_REL_PATH}/src/HttpProxyObject.cpp
    ${THIS_REL_PATH}/src/HttpProxyScript.cpp
    ${THIS_REL_PATH}/src/LogView.cpp
    ${THIS_REL_PATH}/src/LogWidget.cpp
    ${THIS_REL_PATH}/src/LoopProgressWidget.cpp
    ${THIS_REL_PATH}/src/MessageBox.cpp
    ${THIS_REL_PATH}/src/MultiDocumentEnvironment.cpp
    ${THIS_REL_PATH}/src/MultiDocumentSubWindow.cpp
    ${THIS_REL_PATH}/src/MultiDocumentTabBar.cpp
    ${THIS_REL_PATH}/src/MultiDocumentTab.cpp
    ${THIS_REL_PATH}/src/MultiDocumentTabWidget.cpp
    ${THIS_REL_PATH}/src/MultiDocumentWindow.cpp
    ${THIS_REL_PATH}/src/PluginApplication.cpp
    ${THIS_REL_PATH}/src/PrintDialogWrapper.cpp
    ${THIS_REL_PATH}/src/ProgressBar.cpp
    ${THIS_REL_PATH}/src/PropertyArea.cpp
    ${THIS_REL_PATH}/src/PropertyCategory.cpp
    ${THIS_REL_PATH}/src/PropertyCategorySettings.cpp
    ${THIS_REL_PATH}/src/PropertyContext.cpp
    ${THIS_REL_PATH}/src/PropertyEditor.cpp
    ${THIS_REL_PATH}/src/PropertyItem.cpp
    ${THIS_REL_PATH}/src/PropertyProxy.cpp
    ${THIS_REL_PATH}/src/PropertyTab.cpp
    ${THIS_REL_PATH}/src/PropertyTabSettings.cpp
    ${THIS_REL_PATH}/src/PropertyValue.cpp
    ${THIS_REL_PATH}/src/PropertyWidget.cpp
    ${THIS_REL_PATH}/src/QGpGuiTools.cpp
    ${THIS_REL_PATH}/src/RegExpRowSelector.cpp
    ${THIS_REL_PATH}/src/SamplingParameterWidget.cpp
    ${THIS_REL_PATH}/src/SendMail.cpp
    ${THIS_REL_PATH}/src/Settings.cpp
    ${THIS_REL_PATH}/src/SizeGrip.cpp
    ${THIS_REL_PATH}/src/TitledWidget.cpp
    ${THIS_REL_PATH}/src/UpdateIcon.cpp
    ${THIS_REL_PATH}/src/WidgetRect.cpp
    ${THIS_REL_PATH}/src/XMLEditor.cpp
    ${THIS_REL_PATH}/src/XMLItem.cpp
)

# Headers got to include/*
set(HEA_INC
    ${THIS_REL_PATH}/src/QGpGuiTools.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
    ${THIS_REL_PATH}/src/Application.h
    ${THIS_REL_PATH}/src/Attachments.h
    ${THIS_REL_PATH}/src/BugReport.h
    ${THIS_REL_PATH}/src/Cast.h
    ${THIS_REL_PATH}/src/CheckComboBox.h
    ${THIS_REL_PATH}/src/CheckComboBoxModel.h
    ${THIS_REL_PATH}/src/ColorButton.h
    ${THIS_REL_PATH}/src/ColorHistogram.h
    ${THIS_REL_PATH}/src/ColumnTextColumnsProperties.h
    ${THIS_REL_PATH}/src/ColumnTextDelegate.h
    ${THIS_REL_PATH}/src/ColumnTextItem.h
    ${THIS_REL_PATH}/src/ColumnTextLinesProperties.h
    ${THIS_REL_PATH}/src/ColumnTextSectionsProperties.h
    ${THIS_REL_PATH}/src/ColumnTextWidget.h
    ${THIS_REL_PATH}/src/ConnectionParam.h
    ${THIS_REL_PATH}/src/Dialog.h
    ${THIS_REL_PATH}/src/DockWidget.h
    ${THIS_REL_PATH}/src/DoubleSpinBox.h
    ${THIS_REL_PATH}/src/ExpandTabTitle.h
    ${THIS_REL_PATH}/src/ExpandTabWidget.h
    ${THIS_REL_PATH}/src/ExpressionEditor.h
    ${THIS_REL_PATH}/src/FindReplaceWidget.h
    ${THIS_REL_PATH}/src/FrozenWidget.h
    ${THIS_REL_PATH}/src/GuiGlobal.h
    ${THIS_REL_PATH}/src/GuiMessage.h
    ${THIS_REL_PATH}/src/HttpAccess.h
    ${THIS_REL_PATH}/src/HttpProxy.h
    ${THIS_REL_PATH}/src/HttpProxyList.h
    ${THIS_REL_PATH}/src/HttpProxyObject.h
    ${THIS_REL_PATH}/src/HttpProxyScript.h
    ${THIS_REL_PATH}/src/LogView.h
    ${THIS_REL_PATH}/src/LogWidget.h
    ${THIS_REL_PATH}/src/LoopProgressWidget.h
    ${THIS_REL_PATH}/src/MessageBox.h
    ${THIS_REL_PATH}/src/MultiDocumentEnvironment.h
    ${THIS_REL_PATH}/src/MultiDocumentSubWindow.h
    ${THIS_REL_PATH}/src/MultiDocumentTabBar.h
    ${THIS_REL_PATH}/src/MultiDocumentTab.h
    ${THIS_REL_PATH}/src/MultiDocumentTabWidget.h
    ${THIS_REL_PATH}/src/MultiDocumentWindow.h
    ${THIS_REL_PATH}/src/PluginApplication.h
    ${THIS_REL_PATH}/src/PrintDialogWrapper.h
    ${THIS_REL_PATH}/src/ProgressBar.h
    ${THIS_REL_PATH}/src/PropertyArea.h
    ${THIS_REL_PATH}/src/PropertyCategory.h
    ${THIS_REL_PATH}/src/PropertyCategorySettings.h
    ${THIS_REL_PATH}/src/PropertyContext.h
    ${THIS_REL_PATH}/src/PropertyEditor.h
    ${THIS_REL_PATH}/src/PropertyItem.h
    ${THIS_REL_PATH}/src/PropertyProxy.h
    ${THIS_REL_PATH}/src/PropertyTab.h
    ${THIS_REL_PATH}/src/PropertyTabSettings.h
    ${THIS_REL_PATH}/src/PropertyValue.h
    ${THIS_REL_PATH}/src/PropertyWidget.h
    ${THIS_REL_PATH}/src/QGpGuiToolsDLLExport.h
    ${THIS_REL_PATH}/src/QGpGuiTools.h
    ${THIS_REL_PATH}/src/QGpGuiToolsInstallPath.h
    ${THIS_REL_PATH}/src/QGpGuiToolsStatic.h
    ${THIS_REL_PATH}/src/QGpGuiToolsVersion.h
    ${THIS_REL_PATH}/src/RegExpRowSelector.h
    ${THIS_REL_PATH}/src/SamplingParameterWidget.h
    ${THIS_REL_PATH}/src/SendMail.h
    ${THIS_REL_PATH}/src/Settings.h
    ${THIS_REL_PATH}/src/SizeGrip.h
    ${THIS_REL_PATH}/src/stable.h
    ${THIS_REL_PATH}/src/TitledWidget.h
    ${THIS_REL_PATH}/src/UpdateIcon.h
    ${THIS_REL_PATH}/src/WidgetRect.h
    ${THIS_REL_PATH}/src/XMLEditor.h
    ${THIS_REL_PATH}/src/XMLItem.h
)

# Headers got to include/*
set(UI_SRCS
    ${THIS_REL_PATH}/src/Attachments.ui
    ${THIS_REL_PATH}/src/BugReport.ui
    ${THIS_REL_PATH}/src/ColumnTextColumnsProperties.ui
    ${THIS_REL_PATH}/src/ColumnTextLinesProperties.ui
    ${THIS_REL_PATH}/src/ColumnTextSectionsProperties.ui
    ${THIS_REL_PATH}/src/ColumnTextWidget.ui
    ${THIS_REL_PATH}/src/ConnectionParam.ui
    ${THIS_REL_PATH}/src/ExpressionEditor.ui
    ${THIS_REL_PATH}/src/FindReplaceWidget.ui
    ${THIS_REL_PATH}/src/MessageBox.ui
    ${THIS_REL_PATH}/src/SamplingParameterWidget.ui
)

#
# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
# QT5_WRAP_UI(UI_GENERATED_HEADERS ${UI_SRCS})

# Include header files for compilation
include_directories(${THIS_REL_PATH}/src)

#get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
#foreach(dir ${dirs})
  #message(STATUS "dir='${dir}'")
#endforeach()

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

# Add resources from file
qt5_add_resources(QRCS ${THIS_REL_PATH}/QGpGuiTools.qrc)

# Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS} ${QRCS})
target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES} ${MPFR_LIBRARIES} ${GMP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES}) 
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${QT5_LIBRARIES})
target_link_libraries(${PROJECT_NAME} QGpCoreTools)
#target_link_libraries(${PROJECT_NAME} QGpCoreMath)
#target_link_libraries(${PROJECT_NAME} QGpCoreWave)

# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

### Headers copies, PRE and POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    file(
        COPY ${CMAKE_CURRENT_SOURCE_DIR}/${file_i}
        DESTINATION ${THIS_INC_PATH}
    )    
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    file(
        COPY ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} 
        DESTINATION ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )

foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# Generated UI headers to include/${PROJECT_NAME}/*
add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND}
    ARGS -E copy ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}_autogen/include/ui_* ${THIS_INC_PATH}/${PROJECT_NAME}    
)
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})

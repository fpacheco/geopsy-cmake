### RFPV ###
### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(ArrayCore VERSION 0.0.0 DESCRIPTION "ArrayCore description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(CMAKE_MODULAR_BUILD)
    # Global build
    set(THIS_REL_PATH ".")
    #message(STATUS "****** Modular (src: ${THIS_REL_PATH}/src) ******")
else()
    set(THIS_REL_PATH "geopsy-src/geopsy/ArrayCore")
    #message(STATUS "****** Monolithic (src: ${THIS_REL_PATH}/src) ******")
endif()

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find zlib
find_package(ZLIB REQUIRED)
# Find MPFR
find_package(MPFR REQUIRED)
# Find GMP
find_package(GMP REQUIRED)
###

### Qt5 support
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Find Qt5 and add components Widgets, Qml, Sql, Network
find_package(Qt5 COMPONENTS Core Qml Network REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Qml_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

set(QT5_LIBRARIES Qt5::Core Qt5::Qml Qt5::Network)
#message(STATUS "QT5_LIBRARIES: ${QT5_LIBRARIES}")
#message(STATUS "Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
#message(STATUS "Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
#message(STATUS "Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
###

set(TARGET ${CMAKE_PROJECT_NAME})

set(CPP_SRCS
${THIS_REL_PATH}/src/AbstractArrayResults.cpp
${THIS_REL_PATH}/src/AbstractArrayTool.cpp
${THIS_REL_PATH}/src/AbstractFKFunction.cpp
${THIS_REL_PATH}/src/ArrayCore.cpp
${THIS_REL_PATH}/src/ArrayLoop.cpp
${THIS_REL_PATH}/src/ArrayParameters.cpp
${THIS_REL_PATH}/src/ArrayProcess.cpp
${THIS_REL_PATH}/src/ArrayStations.cpp
${THIS_REL_PATH}/src/AsyncArrayProcess.cpp
${THIS_REL_PATH}/src/AsyncFKLoop.cpp
${THIS_REL_PATH}/src/AsyncFKTool.cpp
${THIS_REL_PATH}/src/AsyncParameters.cpp
${THIS_REL_PATH}/src/AsyncStationCouple.cpp
${THIS_REL_PATH}/src/BlockAveragingParameters.cpp
${THIS_REL_PATH}/src/ConvFKRadial.cpp
${THIS_REL_PATH}/src/ConvFKRayleigh.cpp
${THIS_REL_PATH}/src/ConvFKTransverse.cpp
${THIS_REL_PATH}/src/ConvFKVertical.cpp
${THIS_REL_PATH}/src/CrossSpectrum.cpp
${THIS_REL_PATH}/src/FKGridSearch.cpp
${THIS_REL_PATH}/src/FKLoop.cpp
${THIS_REL_PATH}/src/FKParameters.cpp
${THIS_REL_PATH}/src/FKPeaks.cpp
${THIS_REL_PATH}/src/FKProcess.cpp
${THIS_REL_PATH}/src/FKResults.cpp
${THIS_REL_PATH}/src/FKStationSignals.cpp
${THIS_REL_PATH}/src/FKSteering.cpp
${THIS_REL_PATH}/src/FKTool.cpp
${THIS_REL_PATH}/src/FrequencyBand.cpp
${THIS_REL_PATH}/src/GaussianFrequencyBand.cpp
${THIS_REL_PATH}/src/HRFKDirectLove.cpp
${THIS_REL_PATH}/src/HRFKDirectRadial.cpp
${THIS_REL_PATH}/src/HRFKDirectRayleigh.cpp
${THIS_REL_PATH}/src/HRFKDirectRayleighFixedEll.cpp
${THIS_REL_PATH}/src/HRFKDirectRayleighRadial.cpp
${THIS_REL_PATH}/src/HRFKDirectRayleighRefined.cpp
${THIS_REL_PATH}/src/HRFKDirectRayleighVertical.cpp
${THIS_REL_PATH}/src/HRFKRadial.cpp
${THIS_REL_PATH}/src/HRFKRayleigh.cpp
${THIS_REL_PATH}/src/HRFKRayleighEllipticity.cpp
${THIS_REL_PATH}/src/HRFKTransverse.cpp
${THIS_REL_PATH}/src/HRFKVertical.cpp
${THIS_REL_PATH}/src/KmaxSolver.cpp
${THIS_REL_PATH}/src/KminSolver.cpp
${THIS_REL_PATH}/src/LinearFKParameters.cpp
${THIS_REL_PATH}/src/LinearFKPassiveLoop.cpp
${THIS_REL_PATH}/src/LinearFKSearch.cpp
${THIS_REL_PATH}/src/LinearHRFKSearch.cpp
${THIS_REL_PATH}/src/MuttiArrayFKLoop.cpp
${THIS_REL_PATH}/src/OmniFKRayleigh.cpp
${THIS_REL_PATH}/src/OmniFKVertical.cpp
${THIS_REL_PATH}/src/PoggiFKRadial.cpp
${THIS_REL_PATH}/src/PoggiFKVertical.cpp
${THIS_REL_PATH}/src/RingCouples.cpp
${THIS_REL_PATH}/src/RingCouplesProcess.cpp
${THIS_REL_PATH}/src/SPACArrayProcess.cpp
${THIS_REL_PATH}/src/SPACLoop.cpp
${THIS_REL_PATH}/src/SPACParameters.cpp
${THIS_REL_PATH}/src/SPACResults.cpp
${THIS_REL_PATH}/src/SPACStationSignals.cpp
${THIS_REL_PATH}/src/SPACTool.cpp
${THIS_REL_PATH}/src/StationCouple.cpp
${THIS_REL_PATH}/src/StationCoupleProcess.cpp
${THIS_REL_PATH}/src/WaveNumberConverter.cpp
)

# Headers got to include/*
set(HEA_INC
${THIS_REL_PATH}/src/ArrayCore.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
${THIS_REL_PATH}/src/AbstractArrayResults.h
${THIS_REL_PATH}/src/AbstractArrayTool.h
${THIS_REL_PATH}/src/AbstractFKFunction.h
${THIS_REL_PATH}/src/ArrayCoreDLLExport.h
${THIS_REL_PATH}/src/ArrayCore.h
${THIS_REL_PATH}/src/ArrayCoreInstallPath.h
${THIS_REL_PATH}/src/ArrayCoreStatic.h
${THIS_REL_PATH}/src/ArrayCoreVersion.h
${THIS_REL_PATH}/src/ArrayLoop.h
${THIS_REL_PATH}/src/ArrayParameters.h
${THIS_REL_PATH}/src/ArrayProcess.h
${THIS_REL_PATH}/src/ArrayStations.h
${THIS_REL_PATH}/src/AsyncArrayProcess.h
${THIS_REL_PATH}/src/AsyncFKLoop.h
${THIS_REL_PATH}/src/AsyncFKTool.h
${THIS_REL_PATH}/src/AsyncParameters.h
${THIS_REL_PATH}/src/AsyncStationCouple.h
${THIS_REL_PATH}/src/BlockAveragingParameters.h
${THIS_REL_PATH}/src/ConvFKRadial.h
${THIS_REL_PATH}/src/ConvFKRayleigh.h
${THIS_REL_PATH}/src/ConvFKTransverse.h
${THIS_REL_PATH}/src/ConvFKVertical.h
${THIS_REL_PATH}/src/CrossSpectrum.h
${THIS_REL_PATH}/src/FKGridSearch.h
${THIS_REL_PATH}/src/FKLoop.h
${THIS_REL_PATH}/src/FKParameters.h
${THIS_REL_PATH}/src/FKPeaks.h
${THIS_REL_PATH}/src/FKProcess.h
${THIS_REL_PATH}/src/FKResults.h
${THIS_REL_PATH}/src/FKStationSignals.h
${THIS_REL_PATH}/src/FKSteering.h
${THIS_REL_PATH}/src/FKTool.h
${THIS_REL_PATH}/src/FrequencyBand.h
${THIS_REL_PATH}/src/GaussianFrequencyBand.h
${THIS_REL_PATH}/src/HRFKDirectLove.h
${THIS_REL_PATH}/src/HRFKDirectRadial.h
${THIS_REL_PATH}/src/HRFKDirectRayleighFixedEll.h
${THIS_REL_PATH}/src/HRFKDirectRayleigh.h
${THIS_REL_PATH}/src/HRFKDirectRayleighRadial.h
${THIS_REL_PATH}/src/HRFKDirectRayleighRefined.h
${THIS_REL_PATH}/src/HRFKDirectRayleighVertical.h
${THIS_REL_PATH}/src/HRFKRadial.h
${THIS_REL_PATH}/src/HRFKRayleighEllipticity.h
${THIS_REL_PATH}/src/HRFKRayleigh.h
${THIS_REL_PATH}/src/HRFKTransverse.h
${THIS_REL_PATH}/src/HRFKVertical.h
${THIS_REL_PATH}/src/KmaxSolver.h
${THIS_REL_PATH}/src/KminSolver.h
${THIS_REL_PATH}/src/LinearFKParameters.h
${THIS_REL_PATH}/src/LinearFKPassiveLoop.h
${THIS_REL_PATH}/src/LinearFKSearch.h
${THIS_REL_PATH}/src/LinearHRFKSearch.h
${THIS_REL_PATH}/src/MuttiArrayFKLoop.h
${THIS_REL_PATH}/src/OmniFKRayleigh.h
${THIS_REL_PATH}/src/OmniFKVertical.h
${THIS_REL_PATH}/src/PoggiFKRadial.h
${THIS_REL_PATH}/src/PoggiFKVertical.h
${THIS_REL_PATH}/src/RingCouples.h
${THIS_REL_PATH}/src/RingCouplesProcess.h
${THIS_REL_PATH}/src/SPACArrayProcess.h
${THIS_REL_PATH}/src/SPACLoop.h
${THIS_REL_PATH}/src/SPACParameters.h
${THIS_REL_PATH}/src/SPACResults.h
${THIS_REL_PATH}/src/SPACStationSignals.h
${THIS_REL_PATH}/src/SPACTool.h
${THIS_REL_PATH}/src/stable.h
${THIS_REL_PATH}/src/StationCouple.h
${THIS_REL_PATH}/src/StationCoupleProcess.h
${THIS_REL_PATH}/src/WaveNumberConverter.h
)

# Headers got to include/*
set(UI_SRCS

)

#
# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
# QT5_WRAP_UI(UI_GENERATED_HEADERS ${UI_SRCS})

# Include header files for compilation
include_directories(${THIS_REL_PATH}/src)

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

# Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS})
target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES} ${MPFR_LIBRARIES} ${GMP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${QT5_LIBRARIES})
# -lQGpCoreTools -lQGpCoreMath -lGeopsyCore -lQGpCoreWave -lDinverCore -lDinverDCCore -lQGpCompatibility -llapack -lblas -lQGpCoreStat
target_link_libraries(${PROJECT_NAME} QGpCoreTools)
target_link_libraries(${PROJECT_NAME} QGpCoreMath)
target_link_libraries(${PROJECT_NAME} GeopsyCore)
target_link_libraries(${PROJECT_NAME} QGpCoreWave)
target_link_libraries(${PROJECT_NAME} DinverCore)
target_link_libraries(${PROJECT_NAME} DinverDCCore)
target_link_libraries(${PROJECT_NAME} QGpCompatibility)
target_link_libraries(${PROJECT_NAME} lapack)
target_link_libraries(${PROJECT_NAME} blas)
target_link_libraries(${PROJECT_NAME} QGpCoreStat)

# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

### POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})

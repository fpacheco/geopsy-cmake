### RFPV ###
### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(QGpCoreWave VERSION 1.0.0 DESCRIPTION "QGpCoreWave description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(CMAKE_MODULAR_BUILD)
    # Global build
    set(THIS_REL_PATH ".")
    #message(STATUS "****** Modular (src: ${THIS_REL_PATH}/src) ******")
else()
    set(THIS_REL_PATH "geopsy-src/lib/QGpCoreWave")
    #message(STATUS "****** Monolithic (src: ${THIS_REL_PATH}/src) ******")
endif()

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find zlib
find_package(ZLIB REQUIRED)
# Find MPFR
find_package(MPFR REQUIRED)
# Find GMP
find_package(GMP REQUIRED)
# Find LAPACK
find_package(LAPACK REQUIRED)
# Find BLAS
find_package(BLAS REQUIRED)
## Find QGpCoreTools
#find_library(QGPCORETOOLS_LIBRARY
    #NAMES QGpCoreTools
    #HINTS ${THIS_LIB_PATH}
#)
#message(STATUS "QGPCORETOOLS_LIBRARY: ${QGPCORETOOLS_LIBRARY}")
## Find QGpCoreMath
#find_library(QGPCOREMATH_LIBRARY
    #NAMES QGpCoreMath
    #HINTS ${THIS_LIB_PATH}
#)
#message(STATUS "QGPCOREMATH_LIBRARY: ${QGPCOREMATH_LIBRARY}")
###

### Qt5 support
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Find Qt5 and add components Widgets, Qml, Sql, Network
find_package(Qt5 COMPONENTS Core Qml Network REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Qml_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

set(QT5_LIBRARIES Qt5::Core Qt5::Qml Qt5::Network)
#message(STATUS "QT5_LIBRARIES: ${QT5_LIBRARIES}")
#message(STATUS "Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
#message(STATUS "Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
#message(STATUS "Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
###

set(TARGET ${CMAKE_PROJECT_NAME})

set(CPP_SRCS
    ${THIS_REL_PATH}/src/ArrivalTime.cpp
    ${THIS_REL_PATH}/src/AutocorrCurves.cpp
    ${THIS_REL_PATH}/src/AutocorrDispersion.cpp
    ${THIS_REL_PATH}/src/AutocorrEngine.cpp
    ${THIS_REL_PATH}/src/AutocorrFactory.cpp
    ${THIS_REL_PATH}/src/AutocorrProxy.cpp
    ${THIS_REL_PATH}/src/AutocorrRing.cpp
    ${THIS_REL_PATH}/src/Dispersion.cpp
    ${THIS_REL_PATH}/src/DispersionFactory.cpp
    ${THIS_REL_PATH}/src/DispersionProxy.cpp
    ${THIS_REL_PATH}/src/Ellipticity.cpp
    ${THIS_REL_PATH}/src/EllipticityFactory.cpp
    ${THIS_REL_PATH}/src/EllipticityProxy.cpp
    ${THIS_REL_PATH}/src/FactoryPoint.cpp
    ${THIS_REL_PATH}/src/FortranInterface.cpp
    ${THIS_REL_PATH}/src/GeophysicalModel.cpp
    ${THIS_REL_PATH}/src/Love.cpp
    ${THIS_REL_PATH}/src/LoveFunction.cpp
    ${THIS_REL_PATH}/src/MagnetoTelluricCurve.cpp
    ${THIS_REL_PATH}/src/MagnetoTelluricFactory.cpp
    ${THIS_REL_PATH}/src/MagnetoTelluricPoint.cpp
    ${THIS_REL_PATH}/src/MagnetoTelluricPointOptions.cpp
    ${THIS_REL_PATH}/src/MagnetoTelluricProxy.cpp
    ${THIS_REL_PATH}/src/ModalCurve.cpp
    ${THIS_REL_PATH}/src/ModalFactory.cpp
    ${THIS_REL_PATH}/src/ModalProxy.cpp
    ${THIS_REL_PATH}/src/ModalRefine.cpp
    ${THIS_REL_PATH}/src/ModalStorage.cpp
    ${THIS_REL_PATH}/src/Mode.cpp
    ${THIS_REL_PATH}/src/Podvin2D.cpp
    ${THIS_REL_PATH}/src/Podvin3D.cpp
    ${THIS_REL_PATH}/src/Profile.cpp
    ${THIS_REL_PATH}/src/QGpCoreWave.cpp
    ${THIS_REL_PATH}/src/Rayleigh.cpp
    ${THIS_REL_PATH}/src/RayleighFunction.cpp
    ${THIS_REL_PATH}/src/RefractionCurve.cpp
    ${THIS_REL_PATH}/src/RefractionDippingModel.cpp
    ${THIS_REL_PATH}/src/RefractionFactory.cpp
    ${THIS_REL_PATH}/src/RefractionProxy.cpp
    ${THIS_REL_PATH}/src/Resistivity1DModel.cpp
    ${THIS_REL_PATH}/src/Seismic1DModel.cpp
    ${THIS_REL_PATH}/src/ShAmplification.cpp
    ${THIS_REL_PATH}/src/TheoreticalFK.cpp
    ${THIS_REL_PATH}/src/TheoreticalLinearFK.cpp
    ${THIS_REL_PATH}/src/TiltNode.cpp
    ${THIS_REL_PATH}/src/TiltPath.cpp
)

# Headers got to include/*
set(HEA_INC
    ${THIS_REL_PATH}/src/QGpCoreWave.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
    ${THIS_REL_PATH}/src/ArrivalTime.h
    ${THIS_REL_PATH}/src/AutocorrCurves.h
    ${THIS_REL_PATH}/src/AutocorrDispersion.h
    ${THIS_REL_PATH}/src/AutocorrEngine.h
    ${THIS_REL_PATH}/src/AutocorrFactory.h
    ${THIS_REL_PATH}/src/AutocorrProxy.h
    ${THIS_REL_PATH}/src/AutocorrRing.h
    ${THIS_REL_PATH}/src/DispersionFactory.h
    ${THIS_REL_PATH}/src/Dispersion.h
    ${THIS_REL_PATH}/src/DispersionProxy.h
    ${THIS_REL_PATH}/src/EllipticityFactory.h
    ${THIS_REL_PATH}/src/Ellipticity.h
    ${THIS_REL_PATH}/src/EllipticityProxy.h
    ${THIS_REL_PATH}/src/FactoryPoint.h
    ${THIS_REL_PATH}/src/FortranInterface.h
    ${THIS_REL_PATH}/src/GeophysicalModel.h
    ${THIS_REL_PATH}/src/LoveFunction.h
    ${THIS_REL_PATH}/src/Love.h
    ${THIS_REL_PATH}/src/MagnetoTelluricCurve.h
    ${THIS_REL_PATH}/src/MagnetoTelluricFactory.h
    ${THIS_REL_PATH}/src/MagnetoTelluricPoint.h
    ${THIS_REL_PATH}/src/MagnetoTelluricPointOptions.h
    ${THIS_REL_PATH}/src/MagnetoTelluricProxy.h
    ${THIS_REL_PATH}/src/ModalCurve.h
    ${THIS_REL_PATH}/src/ModalFactory.h
    ${THIS_REL_PATH}/src/ModalProxy.h
    ${THIS_REL_PATH}/src/ModalRefine.h
    ${THIS_REL_PATH}/src/ModalStorage.h
    ${THIS_REL_PATH}/src/Mode.h
    ${THIS_REL_PATH}/src/Podvin2D.h
    ${THIS_REL_PATH}/src/Podvin3D.h
    ${THIS_REL_PATH}/src/Profile.h
    ${THIS_REL_PATH}/src/QGpCoreWaveDLLExport.h
    ${THIS_REL_PATH}/src/QGpCoreWaveInstallPath.h
    ${THIS_REL_PATH}/src/QGpCoreWaveStatic.h
    ${THIS_REL_PATH}/src/QGpCoreWaveVersion.h
    ${THIS_REL_PATH}/src/RayleighFunction.h
    ${THIS_REL_PATH}/src/Rayleigh.h
    ${THIS_REL_PATH}/src/RefractionCurve.h
    ${THIS_REL_PATH}/src/RefractionDippingModel.h
    ${THIS_REL_PATH}/src/RefractionFactory.h
    ${THIS_REL_PATH}/src/RefractionProxy.h
    ${THIS_REL_PATH}/src/Resistivity1DModel.h
    ${THIS_REL_PATH}/src/Seismic1DModel.h
    ${THIS_REL_PATH}/src/ShAmplification.h
    ${THIS_REL_PATH}/src/TheoreticalFK.h
    ${THIS_REL_PATH}/src/TheoreticalLinearFK.h
    ${THIS_REL_PATH}/src/TiltNode.h
    ${THIS_REL_PATH}/src/TiltPath.h
)

# Headers got to include/*
set(UI_SRCS

)

#
# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
# QT5_WRAP_UI(UI_GENERATED_HEADERS ${UI_SRCS})

# Include header files for compilation
include_directories(${THIS_REL_PATH}/src)

#get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
#foreach(dir ${dirs})
  #message(STATUS "dir='${dir}'")
#endforeach()

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

# Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS})
target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES} ${MPFR_LIBRARIES} ${GMP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${BLAS_LIBRARIES} ${LAPACK_LIBRARIES}) 
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${QT5_LIBRARIES})
target_link_libraries(${PROJECT_NAME} QGpCoreTools)
target_link_libraries(${PROJECT_NAME} QGpCoreMath)

# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

### POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})

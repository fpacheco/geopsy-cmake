### RFPV ###
### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(QGpCoreTools VERSION 0.0.0 DESCRIPTION "QGpCoreTools description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(CMAKE_MODULAR_BUILD)
    # Global build
    set(THIS_REL_PATH ".")
    #message(STATUS "****** Modular (src: ${THIS_REL_PATH}/src) ******")
else()
    set(THIS_REL_PATH "geopsy-src/lib/QGpCoreTools")
    #message(STATUS "****** Monolithic (src: ${THIS_REL_PATH}/src) ******")
endif()

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find zlib
find_package(ZLIB REQUIRED)
# Find MPFR
find_package(MPFR REQUIRED)
# Find GMP
find_package(GMP REQUIRED)
###

### Qt5 support
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Find Qt5 and add components Widgets, Qml, Sql, Network
find_package(Qt5 COMPONENTS Core Qml Network REQUIRED)
INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Qml_INCLUDE_DIRS})
#INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})

set(QT5_LIBRARIES Qt5::Core Qt5::Qml Qt5::Network)
#message(STATUS "QT5_LIBRARIES: ${QT5_LIBRARIES}")
#message(STATUS "Qt5Core_LIBRARIES: ${Qt5Core_LIBRARIES}")
#message(STATUS "Qt5Core_INCLUDE_DIRS: ${Qt5Core_INCLUDE_DIRS}")
#message(STATUS "Qt5Qml_INCLUDE_DIRS: ${Qt5Qml_INCLUDE_DIRS}")
###

set(TARGET ${CMAKE_PROJECT_NAME})

set(CPP_SRCS
    ${THIS_REL_PATH}/src/AbstractParameters.cpp
    ${THIS_REL_PATH}/src/AbstractProgress.cpp
    ${THIS_REL_PATH}/src/AbstractStream.cpp
    ${THIS_REL_PATH}/src/ApplicationClock.cpp
    ${THIS_REL_PATH}/src/ApplicationHelp.cpp
    ${THIS_REL_PATH}/src/ArgumentStdinReader.cpp
    ${THIS_REL_PATH}/src/AsciiLineParser.cpp
    ${THIS_REL_PATH}/src/AtomicBoolean.cpp
    ${THIS_REL_PATH}/src/Cache.cpp
    ${THIS_REL_PATH}/src/CacheItem.cpp
    ${THIS_REL_PATH}/src/CacheProcess.cpp
    ${THIS_REL_PATH}/src/Color.cpp
    ${THIS_REL_PATH}/src/ColumnTextDescription.cpp
    ${THIS_REL_PATH}/src/ColumnTextFile.cpp
    ${THIS_REL_PATH}/src/ColumnTextIterator.cpp
    ${THIS_REL_PATH}/src/ColumnTextParser.cpp
    ${THIS_REL_PATH}/src/Complex.cpp
    ${THIS_REL_PATH}/src/ComplexMP.cpp
    ${THIS_REL_PATH}/src/ConsoleProgress.cpp
    ${THIS_REL_PATH}/src/CoreApplication.cpp
    ${THIS_REL_PATH}/src/CoreApplicationPrivate.cpp
    ${THIS_REL_PATH}/src/DateTime.cpp
    ${THIS_REL_PATH}/src/DynamicBuffer.cpp
    ${THIS_REL_PATH}/src/EventRestrictor.cpp
    ${THIS_REL_PATH}/src/ExpressionAction.cpp
    ${THIS_REL_PATH}/src/ExpressionActions.cpp
    ${THIS_REL_PATH}/src/ExpressionContext.cpp
    ${THIS_REL_PATH}/src/ExpressionParser.cpp
    ${THIS_REL_PATH}/src/ExpressionStorage.cpp
    ${THIS_REL_PATH}/src/ExpressionString.cpp
    ${THIS_REL_PATH}/src/File.cpp
    ${THIS_REL_PATH}/src/FileStream.cpp
    ${THIS_REL_PATH}/src/FletcherChecksum.cpp
    ${THIS_REL_PATH}/src/Global.cpp
    ${THIS_REL_PATH}/src/IncreaseStorage.cpp
    ${THIS_REL_PATH}/src/Leds.cpp
    ${THIS_REL_PATH}/src/LineParser.cpp
    ${THIS_REL_PATH}/src/LocalPointer.cpp
    ${THIS_REL_PATH}/src/MemoryChecker.cpp
    ${THIS_REL_PATH}/src/MemoryCheckerPrivate.cpp
    ${THIS_REL_PATH}/src/MessageContext.cpp
    ${THIS_REL_PATH}/src/Message.cpp
    ${THIS_REL_PATH}/src/Mutex.cpp
    ${THIS_REL_PATH}/src/Number.cpp
    ${THIS_REL_PATH}/src/PackageInfo.cpp
    ${THIS_REL_PATH}/src/ParallelLoop.cpp
    ${THIS_REL_PATH}/src/PathTranslator.cpp
    ${THIS_REL_PATH}/src/PathTranslatorOptions.cpp
    ${THIS_REL_PATH}/src/PluginCoreApplication.cpp
    ${THIS_REL_PATH}/src/QGpCoreTools.cpp
    ${THIS_REL_PATH}/src/ReadWriteLock.cpp
    ${THIS_REL_PATH}/src/RealMP.cpp
    ${THIS_REL_PATH}/src/SamplingParameters.cpp
    ${THIS_REL_PATH}/src/ScriptContext.cpp
    ${THIS_REL_PATH}/src/SharedObject.cpp
    ${THIS_REL_PATH}/src/SortedStringList.cpp
    ${THIS_REL_PATH}/src/SortedVector.cpp
    ${THIS_REL_PATH}/src/StandardStream.cpp
    ${THIS_REL_PATH}/src/StreamRedirection.cpp
    ${THIS_REL_PATH}/src/StringSection.cpp
    ${THIS_REL_PATH}/src/StringStream.cpp
    ${THIS_REL_PATH}/src/Tar.cpp
    ${THIS_REL_PATH}/src/Thread.cpp
    ${THIS_REL_PATH}/src/ThreadTimer.cpp
    ${THIS_REL_PATH}/src/TraceBug.cpp
    ${THIS_REL_PATH}/src/Trace.cpp
    ${THIS_REL_PATH}/src/TraceInfo.cpp
    ${THIS_REL_PATH}/src/TraceLog.cpp
    ${THIS_REL_PATH}/src/TraceStamp.cpp
    ${THIS_REL_PATH}/src/Translations.cpp
    ${THIS_REL_PATH}/src/TreeContainer.cpp
    ${THIS_REL_PATH}/src/TreeItem.cpp
    ${THIS_REL_PATH}/src/UniqueID.cpp
    ${THIS_REL_PATH}/src/Version.cpp
    ${THIS_REL_PATH}/src/XMLByteArrayStream.cpp
    ${THIS_REL_PATH}/src/XMLClass.cpp
    ${THIS_REL_PATH}/src/XMLClassFactory.cpp
    ${THIS_REL_PATH}/src/XMLContext.cpp
    ${THIS_REL_PATH}/src/XMLErrorReport.cpp
    ${THIS_REL_PATH}/src/XMLGenericItem.cpp
    ${THIS_REL_PATH}/src/XMLHeader.cpp
    ${THIS_REL_PATH}/src/XMLMap.cpp
    ${THIS_REL_PATH}/src/XMLMember.cpp
    ${THIS_REL_PATH}/src/XMLParser.cpp
    ${THIS_REL_PATH}/src/XMLSaveAttributes.cpp
    ${THIS_REL_PATH}/src/XMLStream.cpp
    ${THIS_REL_PATH}/src/XMLStringStream.cpp
    ${THIS_REL_PATH}/src/XMLTarStream.cpp
)

# Headers got to include/*
set(HEA_INC
    ${THIS_REL_PATH}/src/QGpCoreTools.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
    ${THIS_REL_PATH}/src/AbstractParameters.h
    ${THIS_REL_PATH}/src/AbstractProgress.h
    ${THIS_REL_PATH}/src/AbstractStream.h
    ${THIS_REL_PATH}/src/ApplicationClock.h
    ${THIS_REL_PATH}/src/ApplicationHelp.h
    ${THIS_REL_PATH}/src/ArgumentStdinReader.h
    ${THIS_REL_PATH}/src/AsciiLineParser.h
    ${THIS_REL_PATH}/src/AtomicBoolean.h
    ${THIS_REL_PATH}/src/Cache.h
    ${THIS_REL_PATH}/src/CacheItem.h
    ${THIS_REL_PATH}/src/CacheProcess.h
    ${THIS_REL_PATH}/src/Color.h
    ${THIS_REL_PATH}/src/ColumnTextDescription.h
    ${THIS_REL_PATH}/src/ColumnTextFile.h
    ${THIS_REL_PATH}/src/ColumnTextIterator.h
    ${THIS_REL_PATH}/src/ColumnTextParser.h
    ${THIS_REL_PATH}/src/Complex.h
    ${THIS_REL_PATH}/src/ComplexMP.h
    ${THIS_REL_PATH}/src/ConsoleProgress.h
    ${THIS_REL_PATH}/src/CoreApplication.h
    ${THIS_REL_PATH}/src/CoreApplicationPrivate.h
    ${THIS_REL_PATH}/src/DateTime.h
    ${THIS_REL_PATH}/src/DynamicBuffer.h
    ${THIS_REL_PATH}/src/EventRestrictor.h
    ${THIS_REL_PATH}/src/ExpressionAction.h
    ${THIS_REL_PATH}/src/ExpressionActions.h
    ${THIS_REL_PATH}/src/ExpressionContext.h
    ${THIS_REL_PATH}/src/ExpressionParser.h
    ${THIS_REL_PATH}/src/ExpressionStorage.h
    ${THIS_REL_PATH}/src/ExpressionString.h
    ${THIS_REL_PATH}/src/File.h
    ${THIS_REL_PATH}/src/FileStream.h
    ${THIS_REL_PATH}/src/FletcherChecksum.h
    ${THIS_REL_PATH}/src/Global.h
    ${THIS_REL_PATH}/src/IncreaseStorage.h
    ${THIS_REL_PATH}/src/Leds.h
    ${THIS_REL_PATH}/src/LineParser.h
    ${THIS_REL_PATH}/src/LocalPointer.h
    ${THIS_REL_PATH}/src/MemoryChecker.h
    ${THIS_REL_PATH}/src/MemoryCheckerPrivate.h
    ${THIS_REL_PATH}/src/MessageContext.h
    ${THIS_REL_PATH}/src/Message.h
    ${THIS_REL_PATH}/src/Mutex.h
    ${THIS_REL_PATH}/src/Number.h
    ${THIS_REL_PATH}/src/PackageInfo.h
    ${THIS_REL_PATH}/src/ParallelLoop.h
    ${THIS_REL_PATH}/src/PathTranslator.h
    ${THIS_REL_PATH}/src/PathTranslatorOptions.h
    ${THIS_REL_PATH}/src/PluginCoreApplication.h
    ${THIS_REL_PATH}/src/QGpCoreToolsDLLExport.h
    ${THIS_REL_PATH}/src/QGpCoreTools.h
    ${THIS_REL_PATH}/src/QGpCoreToolsInstallPath.h
    ${THIS_REL_PATH}/src/QGpCoreToolsStatic.h
    ${THIS_REL_PATH}/src/QGpCoreToolsVersion.h
    ${THIS_REL_PATH}/src/ReadWriteLock.h
    ${THIS_REL_PATH}/src/RealMP.h
    ${THIS_REL_PATH}/src/SamplingParameters.h
    ${THIS_REL_PATH}/src/ScriptContext.h
    ${THIS_REL_PATH}/src/SharedObject.h
    ${THIS_REL_PATH}/src/SortedStringList.h
    ${THIS_REL_PATH}/src/SortedVector.h
    ${THIS_REL_PATH}/src/StandardStream.h
    ${THIS_REL_PATH}/src/StreamRedirection.h
    ${THIS_REL_PATH}/src/StringSection.h
    ${THIS_REL_PATH}/src/StringStream.h
    ${THIS_REL_PATH}/src/Tar.h
    ${THIS_REL_PATH}/src/Thread.h
    ${THIS_REL_PATH}/src/ThreadTimer.h
    ${THIS_REL_PATH}/src/TraceBug.h
    ${THIS_REL_PATH}/src/Trace.h
    ${THIS_REL_PATH}/src/TraceInfo.h
    ${THIS_REL_PATH}/src/TraceLog.h
    ${THIS_REL_PATH}/src/TraceStamp.h
    ${THIS_REL_PATH}/src/Translations.h
    ${THIS_REL_PATH}/src/TreeContainer.h
    ${THIS_REL_PATH}/src/TreeItem.h
    ${THIS_REL_PATH}/src/UniqueID.h
    ${THIS_REL_PATH}/src/Version.h
    ${THIS_REL_PATH}/src/XMLByteArrayStream.h
    ${THIS_REL_PATH}/src/XMLClassFactory.h
    ${THIS_REL_PATH}/src/XMLClass.h
    ${THIS_REL_PATH}/src/XMLContext.h
    ${THIS_REL_PATH}/src/XMLErrorReport.h
    ${THIS_REL_PATH}/src/XMLGenericItem.h
    ${THIS_REL_PATH}/src/XMLHeader.h
    ${THIS_REL_PATH}/src/XMLMap.h
    ${THIS_REL_PATH}/src/XMLMember.h
    ${THIS_REL_PATH}/src/XMLParser.h
    ${THIS_REL_PATH}/src/XMLSaveAttributes.h
    ${THIS_REL_PATH}/src/XMLStream.h
    ${THIS_REL_PATH}/src/XMLStringStream.h
    ${THIS_REL_PATH}/src/XMLTarStream.h
)

# Headers got to include/*
set(UI_SRCS

)

#
# Generate necessary headers from .ui files. (qmake lets `uic` do this job.)
# hint from [Cross-platform Qt5 project using cmake](http://stackoverflow.com/questions/21174586/cross-platform-qt5-project-using-cmake)
#
# QT5_WRAP_UI(UI_GENERATED_HEADERS ${UI_SRCS})

# Include header files for compilation
include_directories(${THIS_REL_PATH}/src)

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

# Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS})
target_link_libraries(${PROJECT_NAME} ${ZLIB_LIBRARIES} ${MPFR_LIBRARIES} ${GMP_LIBRARIES})
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${QT5_LIBRARIES})

# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)

### POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})

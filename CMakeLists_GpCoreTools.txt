### RFPV ###

### Pass variables like this ... 
# cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEOPSY_APP_BUILD_PATH=/tmp/geopsy ..
###

cmake_minimum_required(VERSION 3.9)

project(GpCoreTools VERSION 1.0.0 DESCRIPTION "GpCoreTools description")

### Modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules")
###

### Cxx options 
# With c++11
set(CMAKE_CXX_STANDARD 11)
# Warnings
if(MSVC)
  # Force to always compile with W4
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -Wdeprecated -pedantic")
endif()
###

# General build directory 
if(CMAKE_MODULAR_BUILD)
    # Global build
    set(THIS_REL_PATH ".")
    #message(STATUS "****** Modular (src: ${THIS_REL_PATH}/src) ******")
else()
    set(THIS_REL_PATH "geopsy-src/lib/GpCoreTools")
    #message(STATUS "****** Monolithic (src: ${THIS_REL_PATH}/src) ******")
endif()

# General build directory 
if(GEOPSY_APP_BUILD_PATH)
    # Global build
    set(THIS_BUILD_PATH ${GEOPSY_APP_BUILD_PATH})
else()
    set(THIS_BUILD_PATH ${CMAKE_BINARY_DIR})
endif()

# General bin directory 
if(GEOPSY_APP_BIN_PATH)
    # Global build
    set(THIS_BIN_PATH ${GEOPSY_APP_BIN_PATH})
else()
    set(THIS_BIN_PATH "${THIS_BUILD_PATH}/bin")
endif()

# General include directory 
if(GEOPSY_APP_INC_PATH)
    # Global build
    set(THIS_INC_PATH ${GEOPSY_APP_INC_PATH})
else()
    set(THIS_INC_PATH "${THIS_BUILD_PATH}/include")
endif()

# General library directory 
if(GEOPSY_APP_LIB_PATH)
    # Global build
    set(THIS_LIB_PATH ${GEOPSY_APP_LIB_PATH})
else()
    set(THIS_LIB_PATH "${THIS_BUILD_PATH}/lib")
endif()

#message(STATUS "THIS_BUILD_PATH: ${THIS_BUILD_PATH}")
#message(STATUS "THIS_BIN_PATH: ${THIS_BIN_PATH}")
#message(STATUS "THIS_INC_PATH: ${THIS_INC_PATH}")
#message(STATUS "THIS_LIB_PATH: ${THIS_LIB_PATH}")

### Add library directory to search path 
link_directories(${THIS_LIB_PATH})
###

### Add include directory to search path 
include_directories(${THIS_INC_PATH})
###

### Find packages
set(THREADS_PREFER_PTHREAD_FLAG ON)
# Find libpthread
find_package(Threads REQUIRED)
# Find librt
find_library(LIBRT rt REQUIRED)
#message(STATUS "librt found in ${LIBRT}")
###

# RFPV: bin and lib should created automatically
# Create include if not exists 
if(NOT EXISTS ${THIS_INC_PATH})
    file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH})
    #)
endif()

# Create include/${PROJECT_NAME} if not exists 
if(NOT EXISTS ${THIS_INC_PATH}/${PROJECT_NAME})
    file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #add_custom_command(
        #TARGET ${PROJECT_NAME}
        #POST_BUILD    
        #file(MAKE_DIRECTORY ${THIS_INC_PATH}/${PROJECT_NAME})
    #)
endif()

set(CPP_SRCS
    ${THIS_REL_PATH}/src/Address.cpp
    ${THIS_REL_PATH}/src/ApplicationHelp.cpp
    ${THIS_REL_PATH}/src/Average.cpp
    ${THIS_REL_PATH}/src/ByteOrder.cpp
    ${THIS_REL_PATH}/src/Chrono.cpp
    ${THIS_REL_PATH}/src/CoreApplication.cpp
    ${THIS_REL_PATH}/src/DaemonApplication.cpp
    ${THIS_REL_PATH}/src/DynamicBuffer.cpp
    ${THIS_REL_PATH}/src/Event.cpp
    ${THIS_REL_PATH}/src/EventLoop.cpp
    ${THIS_REL_PATH}/src/EventStream.cpp
    ${THIS_REL_PATH}/src/File.cpp
    ${THIS_REL_PATH}/src/FletcherChecksum.cpp
    ${THIS_REL_PATH}/src/GpCoreTools.cpp
    ${THIS_REL_PATH}/src/InfiniteLoop.cpp
    ${THIS_REL_PATH}/src/Leds.cpp
    ${THIS_REL_PATH}/src/LinearRegression.cpp
    ${THIS_REL_PATH}/src/Log.cpp
    ${THIS_REL_PATH}/src/MessageClassId.cpp
    ${THIS_REL_PATH}/src/MessageClassIdHeader.cpp
    ${THIS_REL_PATH}/src/MessageClassIdOnly.cpp
    ${THIS_REL_PATH}/src/MessageRaw.cpp
    ${THIS_REL_PATH}/src/MessageRawHeader.cpp
    ${THIS_REL_PATH}/src/MovingStatistics.cpp
    ${THIS_REL_PATH}/src/NewTimerEvent.cpp
    ${THIS_REL_PATH}/src/PackageInfo.cpp
    ${THIS_REL_PATH}/src/PThread.cpp
    ${THIS_REL_PATH}/src/ScreenClient.cpp
    ${THIS_REL_PATH}/src/Serial.cpp
    ${THIS_REL_PATH}/src/StaticTcpClient.cpp
    ${THIS_REL_PATH}/src/Statistics.cpp
    ${THIS_REL_PATH}/src/Stream.cpp
    ${THIS_REL_PATH}/src/TcpClientStream.cpp
    ${THIS_REL_PATH}/src/TcpServerStream.cpp
    ${THIS_REL_PATH}/src/Timer.cpp
    ${THIS_REL_PATH}/src/TraceBug.cpp
    ${THIS_REL_PATH}/src/Trace.cpp
    ${THIS_REL_PATH}/src/TraceInfo.cpp
    ${THIS_REL_PATH}/src/TraceStamp.cpp
    ${THIS_REL_PATH}/src/UdpServerStream.cpp
    ${THIS_REL_PATH}/src/UnixClientStream.cpp
    ${THIS_REL_PATH}/src/UnixServerStream.cpp
    ${THIS_REL_PATH}/src/Variant.cpp
)

# Headers got to include/*
set(HEA_INC
    ${THIS_REL_PATH}/src/GpCoreTools.h
)

# Headers got to include/GpCoreTools/*
set(HEA_SRCS
    ${THIS_REL_PATH}/src/Address.h
    ${THIS_REL_PATH}/src/ApplicationHelp.h
    ${THIS_REL_PATH}/src/Average.h
    ${THIS_REL_PATH}/src/ByteOrder.h
    ${THIS_REL_PATH}/src/Chrono.h
    ${THIS_REL_PATH}/src/CoreApplication.h
    ${THIS_REL_PATH}/src/DaemonApplication.h
    ${THIS_REL_PATH}/src/DynamicBuffer.h
    ${THIS_REL_PATH}/src/Event.h
    ${THIS_REL_PATH}/src/EventLoop.h
    ${THIS_REL_PATH}/src/EventStream.h
    ${THIS_REL_PATH}/src/File.h
    ${THIS_REL_PATH}/src/FletcherChecksum.h
    ${THIS_REL_PATH}/src/GpCoreToolsDLLExport.h
    ${THIS_REL_PATH}/src/GpCoreToolsInstallPath.h
    ${THIS_REL_PATH}/src/GpCoreToolsStatic.h
    ${THIS_REL_PATH}/src/GpCoreToolsVersion.h
    ${THIS_REL_PATH}/src/InfiniteLoop.h
    ${THIS_REL_PATH}/src/Leds.h
    ${THIS_REL_PATH}/src/LinearRegression.h
    ${THIS_REL_PATH}/src/Log.h
    ${THIS_REL_PATH}/src/MessageClassId.h
    ${THIS_REL_PATH}/src/MessageClassIdHeader.h
    ${THIS_REL_PATH}/src/MessageClassIdOnly.h
    ${THIS_REL_PATH}/src/MessageRaw.h
    ${THIS_REL_PATH}/src/MessageRawHeader.h
    ${THIS_REL_PATH}/src/MovingStatistics.h
    ${THIS_REL_PATH}/src/NewTimerEvent.h
    ${THIS_REL_PATH}/src/PackageInfo.h
    ${THIS_REL_PATH}/src/PThread.h
    ${THIS_REL_PATH}/src/ScreenClient.h
    ${THIS_REL_PATH}/src/Serial.h
    ${THIS_REL_PATH}/src/stable.h
    ${THIS_REL_PATH}/src/StaticTcpClient.h
    ${THIS_REL_PATH}/src/Statistics.h
    ${THIS_REL_PATH}/src/Stream.h
    ${THIS_REL_PATH}/src/TcpClientStream.h
    ${THIS_REL_PATH}/src/TcpServerStream.h
    ${THIS_REL_PATH}/src/Timer.h
    ${THIS_REL_PATH}/src/TraceBug.h
    ${THIS_REL_PATH}/src/Trace.h
    ${THIS_REL_PATH}/src/TraceInfo.h
    ${THIS_REL_PATH}/src/TraceStamp.h
    ${THIS_REL_PATH}/src/UdpServerStream.h
    ${THIS_REL_PATH}/src/UnixClientStream.h
    ${THIS_REL_PATH}/src/UnixServerStream.h
    ${THIS_REL_PATH}/src/Variant.h
)

# Include header files for compilation
include_directories(${THIS_REL_PATH}/src)

### Set BUILD PATHS
# Set library build path 
set (EXECUTABLE_OUTPUT_PATH ${THIS_BIN_PATH})
# Set library build path 
set (LIBRARY_OUTPUT_PATH ${THIS_LIB_PATH})
### 

### Create shared library
add_library(${PROJECT_NAME} SHARED ${CPP_SRCS})
# Set VERSION
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})
# Set SOVERSION. Major version.
set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1)
# Link with libraries
target_link_libraries(${PROJECT_NAME} Threads::Threads)
target_link_libraries(${PROJECT_NAME} ${LIBRT})
### 

### POST BUILD
# Include headers (include/*)
foreach( file_i ${HEA_INC})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}
    )
endforeach( file_i )

# All other headers (include/${PROJECT_NAME}/*)
foreach( file_i ${HEA_SRCS})
    add_custom_command(
        TARGET ${PROJECT_NAME}
        POST_BUILD
        COMMAND ${CMAKE_COMMAND}
        ARGS -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${file_i} ${THIS_INC_PATH}/${PROJECT_NAME}
    )
endforeach( file_i )
###

### Install actions 
## TODO: review this
# Install library
install(TARGETS ${PROJECT_NAME} DESTINATION lib/${PROJECT_NAME})

# Install library headers
file(GLOB HEADERS include/*.h)
install(FILES ${HEADERS} DESTINATION include/${PROJECT_NAME})
